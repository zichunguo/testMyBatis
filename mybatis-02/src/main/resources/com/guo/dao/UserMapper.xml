<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.guo.dao.UserMapper">
    <!-- mapper 中开启二级缓存 -->
    <!--<cache />-->
    <!--<cache eviction="FIFO" flushInterval="60000" size="512" readOnly="true"/>-->
    <!-- 使用自定义缓存 chcache -->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>

    <resultMap id="userMap" type="User">
        <result property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="age" column="age"/>
    </resultMap>

    <!-- 查询所有用户 -->
    <select id="getUserList" resultMap="userMap">
        select * from user
        /*select id, name userName, age from user*/
    </select>
    <!-- 根据 ID 查询用户 -->
    <select id="getUserById" resultType="user" useCache="true">
        select * from user where id = #{id}
    </select>
    <!-- 插入用户 -->
    <insert id="addUser" parameterType="com.guo.pojo.User">
        insert into user(id, name, age) values(#{id}, #{name}, #{age})
    </insert>
    <!-- 更新用户 -->
    <update id="updateUser" parameterType="com.guo.pojo.User">
        update user set name = #{name},age = #{age} where id=#{id}
    </update>
    <!-- 删除用户 -->
    <delete id="deleteUser" parameterType="int">
        delete from user where id = #{id}
    </delete>
    <!-- 插入用户 通过map参数 -->
    <insert id="addUserByMap" parameterType="map">
        insert into user(id, name, age) values(#{userId}, #{userName}, #{userAge})
    </insert>
    <!-- 模糊查询用户 -->
    <select id="getUserLike" resultType="com.guo.pojo.User">
        select * from user where name like "%"#{name}"%"
    </select>
    <!-- 使用 limit 实现分页查询 -->
    <select id="getUserByLimit" parameterType="map" resultMap="userMap">
        select * from user limit #{pageNo}, #{pageSize}
    </select>
    <!-- 使用 RowBounds 分页查询 -->
    <select id="getUserByRowBounds" resultMap="userMap">
        select * from user
    </select>

    <!-- 批量添加用户 -->
    <insert id="batchInsertUser" parameterType="list">
        insert into user(id, name, age) values 
        <foreach collection="userList" item="user" separator=",">
            (#{user.id}, #{user.name}, #{user.age})
        </foreach>
    </insert>

    <!-- 批量删除用户 -->
    <delete id="batchDeleteUser" parameterType="Integer">
        delete from user where id in
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>
</mapper>